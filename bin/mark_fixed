#!/bin/bash

# mark - AI prompt templating tool
# Main entry point

# Get the absolute path of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Determine the library directory path
# First check if we're running from the local installation
if [[ -d "$HOME/.local/lib/mark" ]]; then
    LIB_DIR="$HOME/.local/lib/mark"
# Then check if we're running from the global installation
elif [[ -d "/usr/local/lib/mark" ]]; then
    LIB_DIR="/usr/local/lib/mark"
# Fallback to relative path (for development)
else
    LIB_DIR="$SCRIPT_DIR/../lib"
fi

# Source configuration
source "$LIB_DIR/core/config.sh"

# Source core functions
source "$LIB_DIR/core/logging.sh"

# Source utility functions
source "$LIB_DIR/utils/parser.sh"
source "$LIB_DIR/utils/processor.sh"

# Source command functions
source "$LIB_DIR/commands/generate.sh"
source "$LIB_DIR/commands/list.sh"
source "$LIB_DIR/commands/clear.sh"
source "$LIB_DIR/commands/help.sh"

# Main command router
case "${1:-}" in
    generate)
        if [[ -z "$2" ]]; then
            log "ERROR: Missing template argument for generate command"
            echo "Error: Missing template argument for generate command" >&2
            show_help
            exit 1
        fi
        generate_prompt "$2" "$3"
        ;;
    list)
        list_prompts
        ;;
    clear)
        clear_logs
        ;;
    help|--help|-h)
        show_help
        log "Help displayed"
        ;;
    "")
        log "ERROR: No command provided"
        echo "Error: No command provided" >&2
        show_help
        exit 1
        ;;
    *)
        log "ERROR: Unknown command '$1'"
        echo "Error: Unknown command '$1'" >&2
        show_help
        exit 1
        ;;
esac