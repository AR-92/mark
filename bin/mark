#!/bin/bash

# mark - AI prompt templating tool
# Main entry point

# Get the absolute path of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Get the project root directory (parent of bin directory)
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Use the local lib directory
LIB_DIR="$PROJECT_ROOT/lib"

# Configuration file path
CONFIG_FILE="${HOME}/.mark.conf"

# Load configuration if it exists
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
fi

# Set default values if not defined in config file
LOG_FILE="${LOG_FILE:-${HOME}/.mark.log}"
TEMPLATE_DIR="${TEMPLATE_DIR:-${HOME}/.mark/templates}"
TEMPLATE_EXT="${TEMPLATE_EXT:-.md}"
DATA_EXT="${DATA_EXT:-.md}"
MAX_RECURSION_DEPTH="${MAX_RECURSION_DEPTH:-10}"
DEBUG="${DEBUG:-false}"

# Source core functions
source "$LIB_DIR/core/logging.sh"
source "$LIB_DIR/core/config.sh"

# Source utility functions
source "$LIB_DIR/utils/parser.sh"
source "$LIB_DIR/utils/processor.sh"

# Source command functions
source "$LIB_DIR/commands/generate.sh"
source "$LIB_DIR/commands/list.sh"
source "$LIB_DIR/commands/clear.sh"
source "$LIB_DIR/commands/help.sh"
source "$LIB_DIR/commands/config.sh"
source "$LIB_DIR/commands/template.sh"

# Main command router
case "${1:-}" in
    generate|g)
        if [[ -z "$2" ]]; then
            log "ERROR: Missing template argument for generate command"
            echo "Error: Missing template argument for generate command" >&2
            show_help
            exit 1
        fi
        generate_prompt "$2" "$3"
        ;;
    list|l)
        list_prompts
        ;;
    clear|c)
        clear_logs
        ;;
    config|cfg)
        config_command "$2" "$3" "$4"
        ;;
    template|t)
        template_command "$2" "$3" "$4"
        ;;
    help|h|--help|-h)
        if [[ -n "$2" ]]; then
            show_detailed_help "$2"
        else
            show_help
        fi
        log "Help displayed"
        ;;
    version|v|--version|-v)
        echo "mark 1.0.0"
        log "Version displayed"
        ;;
    "")
        log "ERROR: No command provided"
        echo "Error: No command provided" >&2
        show_help
        exit 1
        ;;
    *)
        log "ERROR: Unknown command '$1'"
        echo "Error: Unknown command '$1'" >&2
        show_help
        exit 1
        ;;
esac