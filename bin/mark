#!/bin/bash

# mark - AI prompt templating tool
# Main entry point

# Get the absolute path of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Determine the library directory path
# First check if we're running from the local installation
if [[ -d "$HOME/.local/lib/mark" ]]; then
    LIB_DIR="$HOME/.local/lib/mark"
# Then check if we're running from the global installation
elif [[ -d "/usr/local/lib/mark" ]]; then
    LIB_DIR="/usr/local/lib/mark"
# Fallback to relative path (for development)
else
    LIB_DIR="$SCRIPT_DIR/../lib"
fi

# Source configuration
source "$LIB_DIR/core/config.sh"

# Check if enhanced_config.sh exists in the lib/core directory
if [[ -f "$LIB_DIR/core/enhanced_config.sh" ]]; then
    source "$LIB_DIR/core/enhanced_config.sh"
fi

# Source core functions
source "$LIB_DIR/core/logging.sh"

# Source utility functions
source "$LIB_DIR/utils/parser.sh"
source "$LIB_DIR/utils/processor.sh"

# Source command functions
source "$LIB_DIR/commands/generate.sh"
source "$LIB_DIR/commands/list.sh"
source "$LIB_DIR/commands/clear.sh"
source "$LIB_DIR/commands/help.sh"
source "$LIB_DIR/commands/config.sh"

# Check if template.sh exists in the lib/commands directory
if [[ -f "$LIB_DIR/commands/template.sh" ]]; then
    source "$LIB_DIR/commands/template.sh"
fi

# Check if upgrade.sh exists in the lib/commands directory
if [[ -f "$LIB_DIR/commands/upgrade.sh" ]]; then
    source "$LIB_DIR/commands/upgrade.sh"
fi

# Check if uninstall.sh exists in the lib/commands directory
if [[ -f "$LIB_DIR/commands/uninstall.sh" ]]; then
    source "$LIB_DIR/commands/uninstall.sh"
fi

# Main command router
case "${1:-}" in
    generate)
        if [[ -z "$2" ]] && [[ "$2" != "--interactive" ]] && [[ "$2" != "-i" ]]; then
            log "ERROR: Missing template argument for generate command"
            echo "Error: Missing template argument for generate command" >&2
            show_help
            exit 1
        fi
        generate_prompt "$2" "$3"
        ;;
    list)
        list_prompts
        ;;
    clear)
        clear_logs
        ;;
    config)
        if declare -f config_command >/dev/null; then
            config_command "$2" "$3" "$4"
        else
            echo "Error: Config command not available" >&2
            exit 1
        fi
        ;;
    template)
        if declare -f template_command >/dev/null; then
            template_command "$2" "$3" "$4" "$5"
        else
            echo "Error: Template command not available" >&2
            exit 1
        fi
        ;;
    upgrade)
        if declare -f upgrade_mark >/dev/null; then
            upgrade_mark
        else
            echo "Error: Upgrade command not available" >&2
            exit 1
        fi
        ;;
    uninstall)
        if declare -f uninstall_mark >/dev/null; then
            uninstall_mark
        else
            echo "Error: Uninstall command not available" >&2
            exit 1
        fi
        ;;
    help|--help|-h)
        if [[ -n "$2" ]]; then
            show_detailed_help "$2"
        else
            show_help
        fi
        log "Help displayed"
        ;;
    version|--version|-v)
        echo "mark 1.0.0"
        log "Version displayed"
        ;;
    "")
        log "ERROR: No command provided"
        echo "Error: No command provided" >&2
        show_help
        exit 1
        ;;
    *)
        log "ERROR: Unknown command '$1'"
        echo "Error: Unknown command '$1'" >&2
        show_help
        exit 1
        ;;
esac