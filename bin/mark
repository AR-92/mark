#!/bin/bash

# mark - AI prompt templating tool
# Main entry point

# Get the absolute path of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Determine the library directory path
# First check if we're running from the local installation
if [[ -d "$HOME/.local/lib/mark" ]]; then
    LIB_DIR="$HOME/.local/lib/mark"
# Then check if we're running from the global installation
elif [[ -d "/usr/local/lib/mark" ]]; then
    LIB_DIR="/usr/local/lib/mark"
# Fallback to relative path (for development)
else
    LIB_DIR="$SCRIPT_DIR/../lib"
fi

# Source configuration
source "$LIB_DIR/core/config.sh"

# Check if enhanced_config.sh exists in the lib/core directory
if [[ -f "$LIB_DIR/core/enhanced_config.sh" ]]; then
    source "$LIB_DIR/core/enhanced_config.sh"
fi

# Source color utilities if available
if [[ -f "$LIB_DIR/utils/colors.sh" ]]; then
    source "$LIB_DIR/utils/colors.sh"
fi

# Source core functions
source "$LIB_DIR/core/logging.sh"

# Source utility functions
source "$LIB_DIR/utils/parser.sh"
source "$LIB_DIR/utils/processor.sh"

# Source command functions
source "$LIB_DIR/commands/generate.sh"
source "$LIB_DIR/commands/list.sh"
source "$LIB_DIR/commands/clear.sh"
source "$LIB_DIR/commands/help.sh"
source "$LIB_DIR/commands/config.sh"

# Check if template.sh exists in the lib/commands directory
if [[ -f "$LIB_DIR/commands/template.sh" ]]; then
    source "$LIB_DIR/commands/template.sh"
fi

# Check if upgrade.sh exists in the lib/commands directory
if [[ -f "$LIB_DIR/commands/upgrade.sh" ]]; then
    source "$LIB_DIR/commands/upgrade.sh"
fi

# Check if uninstall.sh exists in the lib/commands directory
if [[ -f "$LIB_DIR/commands/uninstall.sh" ]]; then
    source "$LIB_DIR/commands/uninstall.sh"
fi

# Check if template_interactive.sh exists in the lib/commands directory
if [[ -f "$LIB_DIR/commands/template_interactive.sh" ]]; then
    source "$LIB_DIR/commands/template_interactive.sh"
fi

# Check if generate_interactive.sh exists in the lib/commands directory
if [[ -f "$LIB_DIR/commands/generate_interactive.sh" ]]; then
    source "$LIB_DIR/commands/generate_interactive.sh"
fi

# Main command router
case "${1:-}" in
    generate|g)
        if [[ -z "$2" ]]; then
            log "ERROR: Missing template argument for generate command"
            echo "Error: Missing template argument for generate command" >&2
            show_help
            exit 1
        fi
        # Check if we're in interactive mode
        if [[ "$2" == "interactive" ]] || [[ "$2" == "i" ]]; then
            if declare -f generate_interactive >/dev/null; then
                generate_interactive
            else
                echo "Error: Interactive generate command not available (requires Gum)" >&2
                exit 1
            fi
        else
            generate_prompt "$2" "$3"
        fi
        ;;
    list|l)
        list_prompts
        ;;
    clear|c)
        clear_logs
        ;;
    config|cfg)
        if declare -f config_command >/dev/null; then
            config_command "$2" "$3" "$4"
        else
            echo "Error: Config command not available" >&2
            exit 1
        fi
        ;;
    about|info)
        # Source enhanced about if available
        if [[ -f "$LIB_DIR/commands/about_enhanced.sh" ]]; then
            source "$LIB_DIR/commands/about_enhanced.sh"
            if declare -f show_about_formatted >/dev/null && command -v gum &> /dev/null; then
                show_about_formatted
                exit 0
            fi
        fi
        
        # Fall back to simple about text
        echo "mark - AI Prompt Templating Tool v1.0.0"
        echo "======================================"
        echo ""
        echo "A powerful tool for generating AI prompts from templates with:"
        echo "  • Placeholders: {{variable_name}}"
        echo "  • File inclusion: {{@file_path}}"
        echo "  • Conditional blocks: {{#if condition}}...{{/if}}"
        echo "  • Loop/iteration blocks: {{#each array}}...{{/each}}"
        echo ""
        echo "For more information, visit: https://github.com/AR-92/mark"
        ;;
    template|t)
        if declare -f template_command >/dev/null; then
            template_command "$2" "$3" "$4" "$5"
        else
            echo "Error: Template command not available" >&2
            exit 1
        fi
        ;;
    tui)
        # Check if mark-tui-simple exists and is executable
        if [[ -f "$SCRIPT_DIR/mark-tui-simple" ]] && [[ -x "$SCRIPT_DIR/mark-tui-simple" ]]; then
            exec "$SCRIPT_DIR/mark-tui-simple"
        # Fallback to mark-tui-enhanced if simple version not available
        elif [[ -f "$SCRIPT_DIR/mark-tui-enhanced" ]] && [[ -x "$SCRIPT_DIR/mark-tui-enhanced" ]]; then
            exec "$SCRIPT_DIR/mark-tui-enhanced"
        # Fallback to mark-tui if enhanced version not available
        elif [[ -f "$SCRIPT_DIR/mark-tui" ]] && [[ -x "$SCRIPT_DIR/mark-tui" ]]; then
            exec "$SCRIPT_DIR/mark-tui"
        else
            echo "Error: TUI not available. Please ensure mark-tui exists and is executable." >&2
            exit 1
        fi
        ;;
    upgrade|u)
        if declare -f upgrade_mark >/dev/null; then
            upgrade_mark
        else
            echo "Error: Upgrade command not available" >&2
            exit 1
        fi
        ;;
    uninstall|un)
        if declare -f uninstall_mark >/dev/null; then
            uninstall_mark
        else
            echo "Error: Uninstall command not available" >&2
            exit 1
        fi
        ;;
    help|h|--help|-h)
        if [[ -n "$2" ]]; then
            show_detailed_help "$2"
        else
            show_help
        fi
        log "Help displayed"
        ;;
    version|v|--version|-v)
        echo "mark 1.0.0"
        log "Version displayed"
        ;;
    "")
        log "ERROR: No command provided"
        echo "Error: No command provided" >&2
        show_help
        exit 1
        ;;
    *)
        log "ERROR: Unknown command '$1'"
        echo "Error: Unknown command '$1'" >&2
        show_help
        exit 1
        ;;
esac